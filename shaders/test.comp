#version 460
layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba8, binding = 0) uniform writeonly image2D outImage;

layout(push_constant) uniform CameraUniforms {
    float cam_x;
    float cam_y;
    float cam_zoom;
    float time;
} camera;

const int AA = 1;
const float Speed = 3.0;
const float Steps = 12.0;
const float Size = 0.3;

float hash(float x) { return fract(sin(x)*152754.742); }
float hash2(vec2 x) { return hash(x.x + hash(x.y)); }

float value(vec2 p, float f) {
    float bl = hash2(floor(p*f + vec2(0.,0.)));
    float br = hash2(floor(p*f + vec2(1.,0.)));
    float tl = hash2(floor(p*f + vec2(0.,1.)));
    float tr = hash2(floor(p*f + vec2(1.,1.)));

    vec2 fr = fract(p*f);
    fr = (3.0 - 2.0*fr)*fr*fr;
    float b = mix(bl, br, fr.x);
    float t = mix(tl, tr, fr.x);
    return mix(b, t, fr.y);
}

vec4 background(vec3 ray) {
    vec2 uv = ray.xy;

    if (abs(ray.x) > 0.5)
    uv.x = ray.z;
    else if (abs(ray.y) > 0.5)
    uv.y = ray.z;

    // Stars
    float brightness = value(uv*3.0, 100.0);
    float color = value(uv*2.0, 20.0);
    brightness = pow(brightness, 256.0);
    brightness = brightness * 100.0;
    brightness = clamp(brightness, 0.0, 1.0);

    vec3 stars = brightness * mix(vec3(1.0, 0.6, 0.2), vec3(0.2, 0.6, 1.0), color);

    // Original colorful nebula (pink/purple)
    vec3 nebula = vec3(0.02, 0.01, 0.03);
    float n1 = value(uv * 1.5, 10.0);
    float n2 = value(uv * 3.0, 20.0);
    nebula += vec3(n1 * 0.1, n2 * 0.05, n1 * n2 * 0.08);

    // Very fine bent grid
    float gridScale = 0.04;

    float theta = atan(ray.y, ray.x);
    float phi = asin(clamp(ray.z, -1.0, 1.0));

    float gridTheta = abs(fract(theta / gridScale) - 0.5);
    float gridPhi = abs(fract(phi / gridScale) - 0.5);

    float gridWidth = 0.004;
    float grid = 0.0;

    if (gridTheta < gridWidth || gridPhi < gridWidth) {
        grid = 1.0;
    }

    // Add grid to nebula
    nebula += vec3(0.08, 0.1, 0.15) * grid;

    return vec4(nebula + stars, 1.0);
}

vec4 raymarchDisk(vec3 ray, vec3 zeroPos, float iTime) {
    vec3 position = zeroPos;
    float lengthPos = length(position.xz);
    float dist = min(1.0, lengthPos*(1.0/Size) * 0.5) * Size * 0.4 * (1.0/Steps) / abs(ray.y);

    position += dist * Steps * ray * 0.5;

    vec2 deltaPos;
    deltaPos.x = -zeroPos.z*0.01 + zeroPos.x;
    deltaPos.y = zeroPos.x*0.01 + zeroPos.z;
    deltaPos = normalize(deltaPos - zeroPos.xz);

    float parallel = dot(ray.xz, deltaPos);
    parallel /= sqrt(lengthPos);
    parallel *= 0.5;
    float redShift = parallel + 0.3;
    redShift *= redShift;
    redShift = clamp(redShift, 0.0, 1.0);

    float disMix = clamp((lengthPos - Size * 2.0) * (1.0/Size) * 0.24, 0.0, 1.0);
    vec3 insideCol = mix(vec3(1.0, 0.8, 0.0), vec3(0.5, 0.13, 0.02) * 0.2, disMix);

    insideCol *= mix(vec3(0.4, 0.2, 0.1), vec3(1.6, 2.4, 4.0), redShift);
    insideCol *= 1.25;
    redShift += 0.12;
    redShift *= redShift;

    vec4 o = vec4(0.0);

    for (float i = 0.0; i < Steps; i += 1.0) {
        position -= dist * ray;

        float intensity = clamp(1.0 - abs((i - 0.8) * (1.0/Steps) * 2.0), 0.0, 1.0);
        float lengthPos2 = length(position.xz);
        float distMult = 1.0;

        distMult *= clamp((lengthPos2 - Size * 0.75) * (1.0/Size) * 1.5, 0.0, 1.0);
        distMult *= clamp((Size * 10.0 - lengthPos2) * (1.0/Size) * 0.20, 0.0, 1.0);
        distMult *= distMult;

        float u = lengthPos2 + iTime * Size * 0.3 + intensity * Size * 0.2;

        vec2 xy;
        float rot = mod(iTime * Speed, 8192.0);
        xy.x = -position.z * sin(rot) + position.x * cos(rot);
        xy.y = position.x * sin(rot) + position.z * cos(rot);

        float x = abs(xy.x / xy.y);
        float angle = 0.02 * atan(x);

        const float f = 70.0;
        float noise = value(vec2(angle, u * (1.0/Size) * 0.05), f);
        noise = noise * 0.66 + 0.33 * value(vec2(angle, u * (1.0/Size) * 0.05), f * 2.0);

        float extraWidth = noise * 1.0 * (1.0 - clamp(i * (1.0/Steps) * 2.0 - 1.0, 0.0, 1.0));

        float alpha = clamp(noise * (intensity + extraWidth) * ((1.0/Size) * 10.0 + 0.01) * dist * distMult, 0.0, 1.0);

        vec3 col = 2.0 * mix(vec3(0.3, 0.2, 0.15) * insideCol, insideCol, min(1.0, intensity * 2.0));
        o = clamp(vec4(col * alpha + o.rgb * (1.0 - alpha), o.a * (1.0 - alpha) + alpha), vec4(0.0), vec4(1.0));

        float lengthPos3 = lengthPos2 * (1.0/Size);
        o.rgb += redShift * (intensity * 1.0 + 0.5) * (1.0/Steps) * 100.0 * distMult / (lengthPos3 * lengthPos3);
    }

    o.rgb = clamp(o.rgb - 0.005, 0.0, 1.0);
    return o;
}

void Rotate(inout vec3 vector, vec2 angle) {
    vector.yz = cos(angle.y) * vector.yz + sin(angle.y) * vec2(-1, 1) * vector.zy;
    vector.xz = cos(angle.x) * vector.xz + sin(angle.x) * vec2(-1, 1) * vector.zx;
}

void main() {
    ivec2 size = imageSize(outImage);
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= size.x || gid.y >= size.y) return;

    vec4 colOut = vec4(0.0);
    vec2 fragCoord = vec2(gid);
    vec2 iResolution = vec2(size);
    float iTime = camera.time;

    vec2 fragCoordRot;
    fragCoordRot.x = fragCoord.x * 0.985 + fragCoord.y * 0.174;
    fragCoordRot.y = fragCoord.y * 0.985 - fragCoord.x * 0.174;
    fragCoordRot += vec2(-0.06, 0.12) * iResolution.xy;

    for (int j = 0; j < AA; j++)
    for (int i = 0; i < AA; i++) {
        vec3 ray = normalize(vec3((fragCoordRot - iResolution.xy * 0.5 + vec2(float(i), float(j)) / float(AA)) / iResolution.x, 1.0));

        float camDist = 3.0 * camera.cam_zoom;
        vec3 pos = vec3(0.0, 0.05, -camDist);

        vec2 angle = vec2(iTime * 0.1, 0.2);
        angle.x += camera.cam_x * 0.001;
        angle.y = 1.8 + camera.cam_y * 0.001;

        float dist = length(pos);
        Rotate(pos, angle);
        angle.xy -= min(0.3 / dist, 3.14) * vec2(1.0, 0.5);
        Rotate(ray, angle);

        vec4 col = vec4(0.0);
        vec4 glow = vec4(0.0);
        vec4 outCol = vec4(100.0);

        for (int disks = 0; disks < 20; disks++) {
            for (int h = 0; h < 6; h++) {
                float dotpos = dot(pos, pos);
                float invDist = inversesqrt(dotpos);
                float centDist = dotpos * invDist;
                float stepDist = 0.92 * abs(pos.y / ray.y);
                float farLimit = centDist * 0.5;
                float closeLimit = centDist * 0.1 + 0.05 * centDist * centDist * (1.0/Size);
                stepDist = min(stepDist, min(farLimit, closeLimit));

                float invDistSqr = invDist * invDist;
                float bendForce = stepDist * invDistSqr * Size * 0.625;
                ray = normalize(ray - (bendForce * invDist) * pos);
                pos += stepDist * ray;

                glow += vec4(1.2, 1.1, 1.0, 1.0) * (0.01 * stepDist * invDistSqr * invDistSqr * clamp(centDist * 2.0 - 1.2, 0.0, 1.0));
            }

            float dist2 = length(pos);

            if (dist2 < Size * 0.1) {
                outCol = vec4(col.rgb * col.a + glow.rgb * (1.0 - col.a), 1.0);
                break;
            }
            else if (dist2 > Size * 1000.0) {
                vec4 bg = background(ray);
                outCol = vec4(col.rgb * col.a + bg.rgb * (1.0 - col.a) + glow.rgb * (1.0 - col.a), 1.0);
                break;
            }
            else if (abs(pos.y) <= Size * 0.002) {
                vec4 diskCol = raymarchDisk(ray, pos, iTime);
                pos.y = 0.0;
                pos += abs(Size * 0.001 / ray.y) * ray;
                col = vec4(diskCol.rgb * (1.0 - col.a) + col.rgb, col.a + diskCol.a * (1.0 - col.a));
            }
        }

        if (outCol.r == 100.0)
        outCol = vec4(col.rgb + glow.rgb * (col.a + glow.a), 1.0);

        col = outCol;
        col.rgb = pow(col.rgb, vec3(0.6));

        colOut += col / float(AA * AA);
    }

    imageStore(outImage, gid, colOut);
}